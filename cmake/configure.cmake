set(LIB_DEP "")

# config depending options
macro(enable2obmit n)
  if(ENABLE_${n})
    set(OMIT_${n} OFF)
  else()
    set(OMIT_${n} ON)
  endif()
endmacro() 
list(APPEND CMAKE_REQUIRED_INCLUDES ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/src/headers ${CMAKE_SOURCE_DIR}/src/headers/spatlite ${CMAKE_CURRENT_BINARY_DIR})
option(ENABLE_MATHSQL "Enables SQL math functions" ON)
enable2obmit(MATHSQL)
if(SQLite3_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${SQLite3_INCLUDE_DIRS})
  set(HAVE_LIBSQLITE3 1)
  list(APPEND LIB_DEP ${SQLite3_LIBRARIES})
endif()
if(ZLIB_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${ZLIB_INCLUDE_DIRS})
  list(APPEND LIB_DEP ${ZLIB_LIBRARIES})
endif()
if(${SQLite3_VERSION} VERSION_LESS 3.7.3)
  set(OMIT_GEOCALLBACKS ON)
else()
  option(ENABLE_GEOCALLBACKS "Enables geometry callbacks" OFF)
  enable2obmit(GEOCALLBACKS)
endif()
if(${SQLite3_VERSION} VERSION_LESS 3.8.5)
  set(OMIT_KNN ON)
else()
  option(ENABLE_KNN "Enables KNN support" YES)
  enable2obmit(KNN)
endif()
if(PROJ_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${PROJ_INCLUDE_DIRS})
  list(APPEND LIB_DEP ${PROJ_LIBRARIES})
  set(OPT_ENABLE_PROJ ON)
  if(${PROJ_VERSION} VERSION_LESS 6.0)
    set(PROJ_NEW OFF)
  else()
    set(PROJ_NEW ON)
  endif()
else()
  set(OPT_ENABLE_PROJ OFF)
  set(PROJ_NEW OFF)
endif()
option(ENABLE_PROJ "Enables PROJ inclusion" ${OPT_ENABLE_PROJ})
enable2obmit(PROJ)
if(NOT PROJ_FOUND AND ${ENABLE_PROJ})
  find_package(PROJ REQUIRED)
endif()
option(ENABLE_ICONV "Enables iconv inclusion" ${ICONV_FOUND})
enable2obmit(ICONV)
if(NOT ICONV_FOUND AND ${ENABLE_ICONV})
  find_package(Iconv REQUIRED)
endif()
if(ICONV_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR})
  list(APPEND LIB_DEP ${ICONV_LIBRARY})
endif()
#option(ENABLE_FREEXL "Enables FreeXL inclusion" ${FreeXL_FOUND})
#enable2obmit(FREEXL)
#if(NOT FREEXL_FOUND AND ${ENABLE_FREEXL})
#  find_package(FreeXL REQUIRED)
#endif()
#if(FREEXL_FOUND)
#  list(APPEND CMAKE_REQUIRED_INCLUDES ${FREEXL_INCLUDE_DIR})
#  list(APPEND LIB_DEP ${FREEXL_LIBRARY})
#endif()
set(OMIT_FREEXL ON)
option(ENABLE_EPSG "Enables full EPSG dataset support" ON)
enable2obmit(EPSG)
option(ENABLE_GEOS "Enables GEOS inclusion" ${GEOS_FOUND})
enable2obmit(GEOS)
if(NOT GEOS_FOUND AND ${ENABLE_GEOS})
  find_package(GEOS REQUIRED)
endif()
if(GEOS_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${GEOS_INCLUDE_DIR})
  list(APPEND LIB_DEP ${GEOS_LIBRARY})
  set(ENABLE_GEOS ON)
  set(OMIT_GEOS OFF)
  option(ENABLE_GCP "Enables Control Points (from Grass GIS)" OFF)
  enable2obmit(GCP)
  if(3.4 VERSION_LESS ${GEOS_VERSION})
    option(GEOS_ADVANCED "Enables GEOS advanced features" ON)
  else()
    set(GEOS_ADVANCED OFF)
  endif()
  if(3.5 VERSION_LESS ${GEOS_VERSION})
    option(GEOS_REENTRANT "Enables GEOS reentrant (fully thread safe)" ON)
  else()
    set(GEOS_REENTRANT OFF)
  endif()
  option(GEOS_ONLY_REENTRANT "Completely disables GEOS non-thread safe API" OFF)
  if(3.7 VERSION_LESS ${GEOS_VERSION})
    option(GEOS_370 "Enables GEOS 3.7.0 features" ON)
  else()
    set(GEOS_370 OFF)
  endif()
  #if(RTTOPO_FOUND)
  #  option(ENABLE_RTTOPO "Enables RTTOPO support" OFF)
  #else()
    set(ENABLE_RTTOPO OFF)
  #endif()
  #if(NOT RTTOPO_FOUND AND ${ENABLE_RTTOPO})
  #  find_package(RTTOPO REQUIRED)
  #endif()
  #if(RTTOPO_FOUND)
  #  list(APPEND CMAKE_REQUIRED_INCLUDES ${RTTOPO_INCLUDE_DIR})
  #  list(APPEND LIB_DEP ${RTTOPO_LIBRARY})
  #endif()
else()
  set(ENABLE_GEOS OFF)
  set(OMIT_GEOS ON)
  set(ENABLE_GCP OFF)
  set(GEOS_ADVANCED OFF)
  set(GEOS_REENTRANT OFF)
  set(GEOS_ONLY_REENTRANT OFF)
  set(GEOS_370 OFF)
  set(ENABLE_RTTOPO OFF)
endif()
option(ENABLE_LIBXML2 "Enables libxml2 inclusion" ${LibXml2_FOUND})
if(NOT LibXml2_FOUND AND ${ENABLE_LIBXML2})
  find_package(LibXml2 REQUIRED)
endif()
if(LibXml2_FOUND)
  list(APPEND CMAKE_REQUIRED_INCLUDES ${LIBXML2_INCLUDE_DIR})
  list(APPEND LIB_DEP ${LIBXML2_LIBRARIES})
endif()
option(ENABLE_GEOPACKAGE "Enables full GeoPackage support" ON)
option(BUILD_EXAMPLES "Enables building examples" ON)
#option(BUILD_MODULE_ONLY "Builds only mod_spatialite alone" OFF)
option(BUILD_DOCUMENTATION "Build documentation" ${DOXYGEN_FOUND})
option(BUILD_TESTS "Enables building examples" ON)

# printing an eventual message reporting about GPL escalation
if(${ENABLE_RTTOPO} OR ${ENABLE_GCP})
  set(GPL_WARNING "
  
==============================================================
                        IMPORTANT NOTICE
==============================================================
You have selected ENABLE_RTTOPO and/or ENABLE_GCP

Both modules strictly depend on code released under the GPLv2+
license, wich takes precedence over any other license.
Consequently the copy of libspatialite you are going to build
if configured this way *must* be released under the GPLv2+ license.

If you wish better preserving the initial MPL tri-license you
simply have to reconfigure by disableing both options.
==============================================================")
  message(WARNING ${GPL_WARNING})
endif()

# Checks for header files
include(CheckIncludeFile)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILE(freexl.h HAVE_FREEXL_H)
CHECK_INCLUDE_FILE(geos_c.h HAVE_GEOS_C_H)
CHECK_INCLUDE_FILE(iconv.h HAVE_ICONV_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(librttopo.h HAVE_LIBRTTOPO_H)
CHECK_INCLUDE_FILE(math.h HAVE_MATH_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(proj_api.h HAVE_PROJ_API_H)
CHECK_INCLUDE_FILE(proj.h HAVE_PROJ_H)
CHECK_INCLUDE_FILE(sqlite3ext.h HAVE_SQLITE3EXT_H)
CHECK_INCLUDE_FILE(sqlite3.h HAVE_SQLITE3_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(time.h HAVE_TIME_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(zlib.h HAVE_ZLIB_H)
include(CheckFunctionExists)
check_function_exists(fdatasync HAVE_FDATASYNC)
check_function_exists(ftruncate HAVE_FTRUNCATE)
check_function_exists(getcwd HAVE_GETCWD)
check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)
check_function_exists(localtime_r HAVE_LOCALTIME_R)
check_function_exists(memmove HAVE_MEMMOVE)
check_function_exists(memset HAVE_MEMSET)
check_function_exists(sqrt HAVE_SQRT)
check_function_exists(strcasecmp HAVE_STRCASECMP)
check_function_exists(strerror HAVE_STRERROR)
check_function_exists(strftime HAVE_STRFTIME)
check_function_exists(strncasecmp HAVE_STRNCASECMP)
check_function_exists(strstr HAVE_STRSTR)
include(CheckSymbolExists)
check_symbol_exists(tm "sys/time.h" TM_IN_SYS_TIME)
include(CheckTypeSize)
check_type_size(off_t SIZE_OFF_T)
check_type_size(size_t SIZE_SIZE_T)

if(PROJ_FOUND)
  if(NOT HAVE_PROJ_H)
    find_file(PROJ_H_PATH proj.h PATHS ${PROJ_INCLUDE_DIRS})
    if(PROJ_H_PATH)
      set(HAVE_PROJ_H 1)
    endif()
  endif()
  if(NOT HAVE_PROJ_API_H)
    find_file(PROJ_API_H_PATH proj_api.h PATHS ${PROJ_INCLUDE_DIRS})
    if(PROJ_API_H_PATH)
      set(HAVE_PROJ_API_H 1)
    endif()
  endif()
endif()
if(NOT SIZE_OFF_T)
  set(off_t "long int")
endif()
if(NOT SIZE_SIZE_T)
  set(size_t "unsigned int")
endif()

set(_FILE_OFFSET_BITS 64)
if(${_FILE_OFFSET_BITS} EQUAL 64)
  set(_LARGEFILE_SOURCE ON)
  set(_LARGE_FILE ON)
else()
  set(_LARGEFILE_SOURCE OFF)
  set(_LARGE_FILE OFF)
endif()

if(MSVC AND NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX "d")
endif()
if(NOT WIN32)
  set(HAVE_LIBZ 1)
else()
  set(HAVE_LIBZ 0)
endif()
set(LT_OBJDIR ".libs/")
set(STDC_HEADERS 1)

# Prepare configuration file
macro(cmake_config_in fl)
	file(READ ${CMAKE_CURRENT_SOURCE_DIR}/${fl} _tmp_text)
	foreach(X IN ITEMS _FILE_OFFSET_BITS off_t size_t)
	  string(REPLACE "#undef ${X}" "#cmakedefine ${X} @${X}@" _tmp_text ${_tmp_text})
	endforeach()
	foreach(X IN ITEMS LT_OBJDIR PACKAGE_BUGREPORT PACKAGE_NAME PACKAGE_STRING PACKAGE_TARNAME PACKAGE_URL PACKAGE_VERSION TARGET_CPU VERSION PACKAGE)
	  string(REPLACE "#undef ${X}" "#define ${X} \"@${X}@\"" _tmp_text ${_tmp_text})
	endforeach()
	string(REPLACE "#undef" "#cmakedefine" _tmp_text ${_tmp_text})
	file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${fl} ${_tmp_text})
endmacro() 

if(MSVC)
  cmake_config_in(config-msvc.h.in)
  configure_file(${CMAKE_CURRENT_BINARY_DIR}/config-msvc.h.in ${CMAKE_CURRENT_BINARY_DIR}/config-msvc.h)
else()
  cmake_config_in(config.h.in)
  configure_file(${CMAKE_CURRENT_BINARY_DIR}/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
endif()
